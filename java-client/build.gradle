plugins {
  id 'java-library'
  id 'maven-publish'
  id 'checkstyle'
  id 'idea'
}

version = '3.0.0-SNAPSHOT'

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}


sourceSets {
  integrationTest {
    compileClasspath += sourceSets.main.output + configurations.testCompile
    runtimeClasspath += output + compileClasspath + configurations.testRuntime
  }
}

idea {
  module {
    testSourceDirs += sourceSets.integrationTest.java.srcDirs
    testResourceDirs += sourceSets.integrationTest.resources.srcDirs
    scopes.TEST.plus += [ configurations.integrationTestCompile ]
  }
}


dependencies {
  compile project(':core-io')

  testCompile 'io.projectreactor:reactor-test:3.2.6.RELEASE'
  testCompile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.1'
  testCompile 'org.mockito:mockito-core:2.23.4'
  testCompile 'org.junit.jupiter:junit-jupiter-api:5.4.0'
  testCompile 'org.junit.jupiter:junit-jupiter-params:5.4.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.0'

  integrationTestCompile project(':test-utils')
  integrationTestCompile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.1'
}


test {
  useJUnitPlatform()
}

javadoc {
  source = sourceSets.main.allJava
  classpath = configurations.compileClasspath

  options {
    links "https://docs.oracle.com/javase/8/docs/api/"
    memberLevel = JavadocMemberLevel.PRIVATE
    stylesheetFile = new File(projectDir, "../config/javadoc/style.css")
  }
}

compileTestJava {
  // compile classpath leaks org.apache.logging.log4j.core.config.plugins.processor.PluginProcessor
  // but we don't need annotation processors here. This will be the default in Gradle 5.0
  options.compilerArgs += '-proc:none'
}


task sourceJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allJava
}

task packageJavadoc(type: Jar) {
  from javadoc
  classifier = 'javadoc'
}

jar {
  manifest {
    attributes(
      "Implementation-Vendor": "couchbase",
      "Implementation-Title": "java",
      "Implementation-Version": version
    )
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      artifact sourceJar
      artifact packageJavadoc

      pom {
        name = 'Couchbase Java SDK'
        description = 'The official Couchbase Java SDK'
        url = 'https://couchbase.com'
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        organization {
          name = 'Couchbase, Inc.'
          url = 'https://couchbase.com'
        }
        scm {
          url = 'https://github.com/couchbase/couchbase-jvm-clients'
          connection = 'scm:git:git://github.com/couchbase/couchbase-jvm-clients'
          developerConnection = 'scm:git:git://github.com/couchbase/couchbase-jvm-clients'
        }
        issueManagement {
          system = 'Couchbase JIRA'
          url = 'https://issues.couchbase.com/projects/JCBC'
        }
        developers {
          developer {
            id = 'daschl'
            name = 'Michael Nitschinger'
            email = 'michael.nitschinger@couchbase.com'
          }
          developer {
            id = 'programmatix'
            name = 'Graham Pople'
            email = 'graham.pople@couchbase.com'
          }
          developer {
            id = 'subalakr'
            name = 'Subhashni Balakrishnan'
            email = 'subhashni@couchbase.com'
          }
          developer {
            id = 'dnault'
            name = 'David Nault'
            email = 'david.nault@couchbase.com'
          }
          developer {
            id = 'avsej'
            name = 'Sergey Avseyev'
            email = 'sergey@couchbase.com'
          }
        }
      }
    }
  }
}


task integrationTest(type: Test) {
  description = 'Runs the integration tests.'
  group = 'verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
  mustRunAfter test
}

check.dependsOn integrationTest


checkstyle {
  toolVersion = "8.12"
  configProperties 'checkstyle.header.file': file('../config/checkstyle/checkstyle-header.txt')
}